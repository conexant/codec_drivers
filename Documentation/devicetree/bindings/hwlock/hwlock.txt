Generic hwlock bindings
=======================

Generic bindings that are common to all the hwlock platform specific driver
implementations.

The validity and need of these common properties may vary from one platform
implementation to another. The platform specific bindings should explicitly
state if an optional property is used. Please also look through the individual
platform specific hwlock binding documentations for identifying the applicable
properties.

Common properties:
- #hwlock-cells:	Specifies the number of cells needed to represent a
			specific lock. This property is mandatory for all
			platform implementations.
- hwlock-num-locks:	Number of locks present in a hwlock device. This
			property is needed on hwlock devices, where the number
			of supported locks within a hwlock device cannot be
			read from a register.
- hwlock-base-id:	An unique base Id for the locks for a particular hwlock
			device. This property is mandatory if a SoC has several
			hwlock devices.

Hwlock Users:
=============

Nodes that require specific hwlock(s) should specify them using the property
"hwlocks", each containing a phandle to the hwlock node and an args specifier
value as indicated by #hwlock-cells. Multiple hwlocks can be requested using
an array of the phandle and hwlock number specifier tuple.

1. Example of a node using a single specific hwlock:

The following example has a node requesting a hwlock in the bank defined by
the node hwlock1. hwlock1 is a hwlock provider with an argument specifier
of length 1.

	node {
		...
		hwlocks = <&hwlock1 2>;
		...
	};

2. Example of a node using multiple specific hwlocks:

The following example has a node requesting two hwlocks, a hwlock within
the hwlock device node 'hwlock1' with #hwlock-cells value of 1, and another
hwlock within the hwlock device node 'hwlock2' with #hwlock-cells value of 2.

	node {
		...
		hwlocks = <&hwlock1 2>, <&hwlock2 0 3>;
		...
	};
